[1mdiff --git a/src/ucp/core/ucp_worker.c b/src/ucp/core/ucp_worker.c[m
[1mindex 5adcee9..e243919 100644[m
[1m--- a/src/ucp/core/ucp_worker.c[m
[1m+++ b/src/ucp/core/ucp_worker.c[m
[36m@@ -1777,7 +1777,10 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
     int amo_emul                    = 0;[m
     int num_valid_lanes             = 0;[m
     ucp_lane_index_t lane;[m
[31m-[m
[32m+[m[41m    [m
[32m+[m[32m    ucp_config_t *config;[m
[32m+[m[32m    // ucs_status_t status;[m
[32m+[m[41m    [m
     ucp_ep_config_name(worker, cfg_index, &strb);[m
 [m
     for (lane = 0; lane < key->num_lanes; ++lane) {[m
[36m@@ -1851,8 +1854,16 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
     ucp_worker_add_feature_rsc(context, key, ka_lanes_map, "ka", &strb);[m
 [m
     ucs_string_buffer_rtrim(&strb, "; ");[m
[32m+[m[41m    [m
[32m+[m[32m    // HW5[m
[32m+[m[32m    ucp_config_read(NULL, NULL, &config);[m
[32m+[m[32m    // ucs_string_buffer_cstr(&strb) = cfg#0 tag(ud_verbs/ibp3s0:1) = title[m
[32m+[m[32m    ucp_config_print(config, stdout, ucs_string_buffer_cstr(&strb), UCS_CONFIG_PRINT_TLS);[m
[32m+[m[32m    ucp_config_release(config);[m
[32m+[m
[32m+[m[32m    // ucs_info("%s", ucs_string_buffer_cstr(&strb));[m
[32m+[m[32m    // printf("%s", ucs_string_buffer_cstr(&strb));[m
 [m
[31m-    ucs_info("%s", ucs_string_buffer_cstr(&strb));[m
 }[m
 [m
 static ucs_status_t ucp_worker_init_mpools(ucp_worker_h worker)[m
[36m@@ -2042,6 +2053,7 @@[m [mucs_status_t ucp_worker_get_ep_config(ucp_worker_h worker,[m
     ucp_lane_index_t tag_exp_lane;[m
     unsigned tag_proto_flags;[m
     ucs_status_t status;[m
[32m+[m[32m    // ucp_config_t *config;[m
 [m
     ucs_assertv_always(key->num_lanes > 0,[m
                        "empty endpoint configurations are not allowed");[m
[36m@@ -2073,6 +2085,10 @@[m [mucs_status_t ucp_worker_get_ep_config(ucp_worker_h worker,[m
 [m
     ep_cfg_index = ucs_array_length(&worker->ep_config) - 1;[m
 [m
[32m+[m[41m    [m
[32m+[m[32m    // ucp_config_read(NULL, NULL, &config);[m
[32m+[m[32m    // ucp_config_print(config, stdout, NULL, UCS_CONFIG_PRINT_TLS);[m
[32m+[m
     if (ep_init_flags & UCP_EP_INIT_FLAG_INTERNAL) {[m
         /* Do not initialize short protocol thresholds for internal endpoints,[m
          * and do not print their configuration[m
[1mdiff --git a/src/ucs/config/parser.c b/src/ucs/config/parser.c[m
[1mindex a13d508..b107793 100644[m
[1m--- a/src/ucs/config/parser.c[m
[1m+++ b/src/ucs/config/parser.c[m
[36m@@ -1568,7 +1568,7 @@[m [mucs_status_t ucs_config_parser_set_value(void *opts, ucs_config_field_t *fields,[m
     return ucs_config_parser_set_value_internal(opts, fields, name, value, NULL, 1);[m
 }[m
 [m
[31m-ucs_status_t ucs_config_parser_get_value(void *opts, ucs_config_field_t *fields,[m
[32m+[m[32mucs_status_t ucs_config_parser_get_value(const void *opts, ucs_config_field_t *fields,[m
                                          const char *name, char *value,[m
                                          size_t max)[m
 {[m
[36m@@ -1856,6 +1856,7 @@[m [mvoid ucs_config_parser_print_opts(FILE *stream, const char *title, const void *o[m
 {[m
     ucs_config_parser_prefix_t table_prefix_elem;[m
     UCS_LIST_HEAD(prefix_list);[m
[32m+[m[32m    // char str[100];[m
 [m
     if (flags & UCS_CONFIG_PRINT_DOC) {[m
         fprintf(stream, "# UCX library configuration file\n");[m
[36m@@ -1878,8 +1879,30 @@[m [mvoid ucs_config_parser_print_opts(FILE *stream, const char *title, const void *o[m
     }[m
 [m
     // TODO: PP-HW-UCX[m
[31m-    if (flags /*& UCS_CONFIG_PRINT_TLS*/) {[m
[31m-[m
[32m+[m[32m    if (flags & UCS_CONFIG_PRINT_TLS) {[m
[32m+[m[32m        // 1. print first line[m
[32m+[m[32m        // reference "ucs_config_parser_print_env_vars" function[m
[32m+[m[32m        char **envp, *env;[m
[32m+[m[32m        char *mainString;[m
[32m+[m[32m        char *subString;[m
[32m+[m[32m        char *result;[m
[32m+[m
[32m+[m[32m        for (envp = environ; *envp != NULL; ++envp) {[m
[32m+[m[32m            env = ucs_strdup(*envp, "env_str");[m
[32m+[m[32m            mainString = env;[m
[32m+[m[32m            subString = "UCX_TLS";[m
[32m+[m[32m            result = strstr(mainString, subString);[m
[32m+[m[32m            if (result != NULL) {[m
[32m+[m[32m                printf("%s\n", mainString);[m
[32m+[m[32m            }[m
[32m+[m[32m            if (env == NULL) {[m
[32m+[m[32m                continue;[m[41m            [m
[32m+[m[32m            }[m
[32m+[m[32m            ucs_free(env);[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        // 2. second line[m
[32m+[m[32m        printf("%s\n", title);[m
     }[m
 [m
     if (flags & UCS_CONFIG_PRINT_HEADER) {[m
[1mdiff --git a/src/ucs/config/parser.h b/src/ucs/config/parser.h[m
[1mindex fe044d8..3600b56 100644[m
[1m--- a/src/ucs/config/parser.h[m
[1m+++ b/src/ucs/config/parser.h[m
[36m@@ -513,7 +513,7 @@[m [mvoid ucs_config_parser_print_all_opts(FILE *stream, const char *prefix,[m
  * @param value      Filled with option value (as a string).[m
  * @param max        Number of bytes reserved in 'value'.[m
  */[m
[31m-ucs_status_t ucs_config_parser_get_value(void *opts, ucs_config_field_t *fields,[m
[32m+[m[32mucs_status_t ucs_config_parser_get_value(const void *opts, ucs_config_field_t *fields,[m
                                         const char *name, char *value, size_t max);[m
 [m
 /**[m
[1mdiff --git a/src/ucs/config/types.h b/src/ucs/config/types.h[m
[1mindex c300a6b..7fcea16 100644[m
[1m--- a/src/ucs/config/types.h[m
[1m+++ b/src/ucs/config/types.h[m
[36m@@ -90,7 +90,8 @@[m [mtypedef enum {[m
     UCS_CONFIG_PRINT_HEADER          = UCS_BIT(1),[m
     UCS_CONFIG_PRINT_DOC             = UCS_BIT(2),[m
     UCS_CONFIG_PRINT_HIDDEN          = UCS_BIT(3),[m
[31m-    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4)[m
[32m+[m[32m    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4),[m[41m [m
[32m+[m[32m    UCS_CONFIG_PRINT_TLS = UCS_BIT(5)[m
 } ucs_config_print_flags_t;[m
 [m
 [m
[1mdiff --git a/test/run.batch b/test/run.batch[m
[1mindex b944906..c4a41b8 100644[m
[1m--- a/test/run.batch[m
[1m+++ b/test/run.batch[m
[36m@@ -5,7 +5,7 @@[m
 #SBATCH --ntasks=2[m
 #SBATCH --time=00:01:00[m
 #SBATCH --mem=1000[m
[31m-#SBATCH --partition=test[m
[32m+[m[32m#SBATCH --partition=apollo-cpu[m
 [m
 module load openmpi/4.1.6[m
 [m
[36m@@ -16,4 +16,4 @@[m [mld_preload_paths=$(find "$ucx_lib_directory" -name 'libucp.so.0' -o -name 'libuc[m
 echo $ld_preload_paths[m
 [m
 #srun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} /home/ta/willian/osu/osu-micro-benchmarks-7.3/c/mpi/pt2pt/standard/osu_latency[m
[31m-srun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} $HOME/UCX-lsalab/test/mpi/osu/pt2pt/standard/osu_latency[m
[32m+[m[32msrun --export LD_PRELOAD=${ld_preload_paths}:${LD_PRELOAD} $HOME/UCX-lsalab/test/mpi/osu/pt2pt/osu_latency[m
